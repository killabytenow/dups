[config]
#hashes = .dups.hashes.db
files = .dups.files.db
#master += ./roms
slave += ./
shell = /bin/bash
gz = 1			# parse gzipped content (not gz files)
xz = 1			# parse xz'ed content (not xz files)
#action_m:m = print_files
#action_m:s = print_files
#action_s:s = print_files
#action_m   = print_files
#action_s   = print_files
#action_m:m = select_file_rename_and_delete_rest_script
#action_m:s = select_file_rename_and_delete_rest_script
#action_s:s = select_file_rename_and_delete_rest_script
#action_s   = move_to_master_folder

[common_funcs]
__logmsg()
{
	local L="$1"
	shift
	local M="$@"
	if [ "$L" ]; then
		L="$L: "
	fi
	echo "$L$M" 1>&2
}

debug()
{
	if [ "$DEBUG" ]; then __logmsg "debug:" "$@"; fi
}

msg()     { __logmsg ""        "$@"; }
warning() { __logmsg "warning" "$@"; }
error()   { __logmsg "error"   "$@"; }
fatal()   { __logmsg "fatal"   "$@"; exit 1; }

dbg() { debug   "$@"; }
wrn() { warning "$@"; }
err() { error   "$@"; }
fat() { fatal   "$@"; }

finish_all()
{
	local MSG="$1"
	if [ -z "$MSG" ]; then
		MSG="Finishing dups from script"
	fi
	msg "$MSG"
	kill "$DUPS_PID"
	exit 1
}

[build_files_array_script]
#!/bin/bash
# save files in array
FILES=()
FILES+=("$FILE")
while read -u 3 DUP; do
	FILES+=("$DUP")
done

[print_files]
#!/bin/bash

@include[common_funcs]
@include[build_files_array_script]

case "$DUPS_TYPE" in
	m:m)
		msg "Master dups of master [$FILE]:"
		;;
	m:s)
		msg "Slave dups of master [$FILE]:"
		;;
	s:s)
		msg "Slave dups of slave [$FILE]:"
		;;
	m)
		msg "Unique master [$FILE]"
		;;
	s)
		msg "Unique slave [$FILE]"
		;;
	*)
		wrn "Unknown DUPS_TYPE [$DUPS_TYPE] [$FILE]:"
esac
if [ "${#FILES[*]}" -gt 0 ]; then
	for FILE in "${FILES[@]}"; do
		msg "    '$FILE'"
	done
fi

[delete_dups]
#!/bin/bash

@include[common_funcs]
@include[build_files_array_script]

msg "deleting dups of '$FILE'"
for DUP in "${FILES[@]}"; do
	msg "    '$DUP'"
	rm -f -- "$DUP"
done

[move_to_master_folder]
#!/bin/bash

@include[common_funcs]
@include[build_files_array_script]

FOLDERS+=()
IFS=":"
I=0
for MFOLDER in $MASTER_FOLDERS; do
IFS="
"
	for D in $(find "$MFOLDER" -type d); do
		FOLDERS+=("$I")
		FOLDERS+=("$D")
		I=$(($I + 1))
	done
done

# invoke dialog
R=$(
	dialog \
		--no-mouse								\
		--keep-tite								\
		--begin 5 5								\
		--infobox "Space saved: $SPACE_DELETED ($DUPS_DELETED dups)" 3 70	\
		--and-widget								\
		--backtitle dups							\
		--title "Select destination folder"					\
		--extra-button --extra-label Skip					\
		--menu "Select target folder for file '$FILE'" 0 70 10 "${FOLDERS[@]}"	\
	2>&1 > /dev/tty)
C="$?"

#msg "[$R][$C][${FOLDERS[$(($C*2 + 1))]}]"
if [ "$C" -eq 0 -a "$R" ]; then
	mv "$FILE" "${FOLDERS[$(($C*2 + 1))]}"
elif [ "$C" -eq 3 ]; then
	msg "skipping '$FILE'"
else
	# if 'cancel' kill dups program
	finish_all "cancelling."
	exit 1
fi

[select_file_and_rename_dialog_func]
#!/bin/bash
# SELECTED_FILE
# FINAL_NAME

DIALOG_ACTION=""
DIALOG_SELECTION=""
DIALOG_SELECTION_N=""
DIALOG_RENAME=""

select_file_and_rename_dialog()
{
	# build an array for invoking dialog
	local DIALOG_ARRAY=()
	local I=0
	local F=""
	local R=""
	local C=""
	local M="Space saved: $SPACE_DELETED ($DUPS_DELETED dups)"
	local _RENAME=""
	local _SELECTION=""
	local _SELECTION_N=""
	local _ACTION=""

	for F in "${FILES[@]}"; do
		DIALOG_ARRAY+=($I)
		DIALOG_ARRAY+=("$F")
		I=$(($I + 1))
	done

	# invoke dialog (select file)
	R=$(dialog \
		--no-mouse								\
		--keep-tite								\
		--backtitle dups							\
		--begin 5 5								\
		--infobox "$M" 3 70							\
		--and-widget								\
		--title "Select file"							\
		--extra-button --extra-label Skip					\
		--menu "Select which file should be saved" 0 0 10 "${DIALOG_ARRAY[@]}"	\
		2>&1 > /dev/tty)
	C="$?"

	# invoke dialog again (rename file)
	if [ "$C" -eq 0 ]; then
		M="$M\\nFiles:"
		for F in "${FILES[@]}"; do
			M="$M\\n[$F]"
		done
		_SELECTION_N="$R"
		_SELECTION="${FILES[$R]}"
		if [ "$_SELECTION" ]; then
			_RENAME=$(dialog \
				--no-mouse						\
				--keep-tite						\
				--backtitle dups					\
				--begin 5 5						\
				--infobox "$M" "$((4+${#FILES[*]}))" 70			\
				--and-widget						\
				--title "Rename file"					\
				--extra-button --extra-label Skip			\
				--inputbox "Edit for renaming file" 0 70 "$_SELECTION"	\
				2>&1 > /dev/tty)
			C="$?"
		else
			finish_all "void R(response)"
		fi
	fi

	# if all ok
	if [ "$C" -eq 0 ]; then
		DIALOG_SELECTION="$_SELECTION"
		DIALOG_SELECTION_N="$_SELECTION_N"
		if [ "$_SELECTION" = "$_RENAME" -o -z "$_RENAME" ]; then
			DIALOG_RENAME=""
			DIALOG_ACTION="SELECT"
		else
			DIALOG_RENAME="$_RENAME"
			DIALOG_ACTION="RENAME"
		fi
	elif [ "$C" -eq 3 ]; then
		DIALOG_ACTION="SKIP"
	else
		DIALOG_ACTION="CANCEL"
	fi
	dbg "DIALOG_SELECTION=$DIALOG_SELECTION"
	dbg "DIALOG_SELECTION_N=$DIALOG_SELECTION_N"
	dbg "DIALOG_RENAME=$DIALOG_RENAME"
	dbg "DIALOG_ACTION=$DIALOG_ACTION"
}

[select_file_rename_and_delete_rest_script]
@include[select_file_and_rename_dialog_func]

# invoke dialog
select_file_and_rename_dialog

# if cancel or skip, then finish
if [ "$DIALOG_ACTION" = "CANCEL" ]; then
	# if 'cancel' kill dups program
	finish_all "cancelling."
fi
if [ "$DIALOG_ACTION" = "SKIP" ]; then
	msg "skipping (void rename):"
	for i in "${FILES[@]}"; do
		msg "    '$i'"
	done
	exit 0
fi

# assert
if [ "$DIALOG_ACTION" != "SELECT" -a "$DIALOG_ACTION" != "RENAME" ]; then
	err "Unknown DIALOG_ACTION [$DIALOG_ACTION]"
	exit 1
fi
test
if [ "$DIALOG_SELECTION_N" -lt 0 -o "$DIALOG_SELECTION_N" -ge "${#FILES[*]}" ]; then
	err "Bad DIALOG_SELECTION_N [$DIALOG_SELECTION_N]"
	exit 1
fi

# delete other files
for (( i = 0; i < ${#FILES[*]}; i++ ))
do 
	if [ "$i" -ne "$DIALOG_SELECTION_N" ]; then
		msg "deleting '${FILES[$i]}'"
		rm -f -- "${FILES[$i]}"
	else
		msg "saving '${FILES[$i]}'"
	fi
done

# rename?
if [ "$DIALOG_ACTION" = "RENAME" ]; then
	msg "Renaming '$DIALOG_SELECTION' to '$DIALOG_RENAME'"
	mv -- "$DIALOG_SELECTION" "$DIALOG_RENAME"
fi

[select_file_rename_and_delete_rest]
#!/bin/bash
@include[common_funcs]
@include[build_files_array_script]
@include[select_file_rename_and_delete_rest_script]

[save_master_or_select_file_delete_rest]
#!/bin/bash

@include[common_funcs]
@include[build_files_array_script]

# if there are only two files, and both have the same name, delete secondary
# and keep master
if [ "${#FILES[*]}" -eq 2 ]; then
	A="$(basename "${FILES[0]}")"
	B="$(basename "${FILES[1]}")"
	if [ "$A" = "$B" ]; then
		msg "saving master '${FILES[0]}'"
		rm -f -- "${FILES[1]}"
		exit 0
	fi
fi

# otherwise invoke the standard select file and rename script
@include[select_file_rename_and_delete_rest_script]

